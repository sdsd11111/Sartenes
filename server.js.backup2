const express = require('express');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const multer = require('multer');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 9000;  // Puerto 9000 como predeterminado

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://hmljlcwfmxflxilhgmha.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'tu_clave_anon_de_supabase';
const supabase = createClient(supabaseUrl, supabaseKey);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Configuraci√≥n de archivos est√°ticos para la carpeta admin
app.use('/admin', express.static(path.join(__dirname, 'admin'), {
  index: false,
  extensions: ['html', 'js', 'css', 'png', 'jpg', 'jpeg', 'gif', 'ico', 'svg']
}));

// Configuraci√≥n de archivos est√°ticos para la carpeta public
app.use(express.static(path.join(__dirname, 'public'), {
  index: false,
  extensions: ['html', 'js', 'css', 'png', 'jpg', 'jpeg', 'gif', 'ico', 'svg']
}));

// Ruta para el panel de administraci√≥n
app.get('/admin', (req, res) => {
  res.sendFile(path.join(__dirname, 'admin', 'index.html'));
});

// Ruta para manejar la ruta ra√≠z
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Ruta comod√≠n para la SPA (debe ir al final)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Ruta de prueba
app.get('/api/test', (req, res) => {
  res.json({ message: '¬°La API est√° funcionando correctamente con Supabase!' });
});

// Ruta para obtener los platos activos
app.get('/api/platos-activos', async (req, res) => {
  try {
    console.log('üîç Obteniendo platos activos desde Supabase...');
    
    const { data: platos, error } = await supabase
      .from('platos_del_dia')
      .select('*')
      .eq('activo', true)
      .order('orden', { ascending: true });

    if (error) throw error;
    
    console.log(`‚úÖ Se encontraron ${platos.length} platos activos`);
    res.json(platos);
  } catch (error) {
    console.error('‚ùå Error al obtener platos activos:', error.message);
    res.status(500).json({ 
      error: 'Error al obtener los platos activos',
      details: error.message
    });
  }
});

// Configuraci√≥n de multer para la carga de im√°genes
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const dir = path.join(__dirname, 'public', 'images', 'platos');
    // Crear el directorio si no existe
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    // Generar un nombre de archivo √∫nico basado en el t√≠tulo del plato
    const titulo = req.body.titulo || 'plato';
    const nombreArchivo = titulo
      .toLowerCase()
      .normalize('NFD').replace(/[\u0300-\u036f]/g, '') // Eliminar acentos
      .replace(/[^a-z0-9]+/g, '-') // Reemplazar espacios y caracteres especiales con guiones
      .replace(/-+/g, '-') // Reemplazar m√∫ltiples guiones por uno solo
      .replace(/^-|-$/g, '') + path.extname(file.originalname).toLowerCase();
    
    cb(null, nombreArchivo);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // L√≠mite de 5MB
  fileFilter: function (req, file, cb) {
    // Aceptar solo im√°genes
    if (!file.mimetype.startsWith('image/')) {
      return cb(new Error('Solo se permiten archivos de imagen'), false);
    }
    cb(null, true);
  }
});

// Ruta para obtener un plato por ID
app.get('/api/platos/:id', async (req, res) => {
  try {
    const { data: plato, error } = await supabase
      .from('platos_del_dia')
      .select('*')
      .eq('id', req.params.id)
      .single();
    
    if (error) throw error;
    if (!plato) {
      return res.status(404).json({ error: 'Plato no encontrado' });
    }
    
    res.json(plato);
  } catch (error) {
    console.error('‚ùå Error al obtener el plato:', error.message);
    res.status(500).json({ 
      error: 'Error al obtener el plato',
      details: error.message
    });
  }
});

// Ruta para crear un nuevo plato
app.post('/api/platos', upload.single('imagen'), async (req, res) => {
  try {
    const { titulo, descripcion, valor, orden, activo } = req.body;
    
    // Construir la ruta de la imagen si se subi√≥ un archivo
    let imagen_url = '';
    if (req.file) {
      imagen_url = `/images/platos/${req.file.filename}`;
    }
    
    // Insertar el nuevo plato en Supabase
    const { data: plato, error } = await supabase
      .from('platos_del_dia')
      .insert([
        { 
          titulo, 
          descripcion, 
          valor: parseFloat(valor), 
          imagen_url, 
          orden: parseInt(orden) || 0, 
          activo: activo === '1' || activo === true,
          creado_en: new Date().toISOString()
        }
      ])
      .select()
      .single();
    
    if (error) throw error;
    
    res.status(201).json(plato);
  } catch (error) {
    console.error('‚ùå Error al crear el plato:', error.message);
    res.status(500).json({ 
      error: 'Error al crear el plato',
      details: error.message
    });
  }
});

// Ruta para actualizar un plato existente
app.put('/api/platos/:id', upload.single('imagen'), async (req, res) => {
  try {
    const { titulo, descripcion, valor, orden, activo } = req.body;
    const platoId = req.params.id;
    
    // Obtener el plato actual para ver si tiene una imagen
    const { data: platoActual, error: errorActual } = await supabase
      .from('platos_del_dia')
      .select('imagen_url')
      .eq('id', platoId)
      .single();
    
    if (errorActual) throw errorActual;
    if (!platoActual) {
      return res.status(404).json({ error: 'Plato no encontrado' });
    }
    
    let imagen_url = platoActual.imagen_url;
    
    // Si se subi√≥ una nueva imagen, actualizar la ruta
    if (req.file) {
      // Eliminar la imagen anterior si existe
      if (imagen_url) {
        const rutaImagenAnterior = path.join(__dirname, 'public', imagen_url);
        if (fs.existsSync(rutaImagenAnterior)) {
          fs.unlinkSync(rutaImagenAnterior);
        }
      }
      
      imagen_url = `/images/platos/${req.file.filename}`;
    }
    
    // Actualizar el plato en Supabase
    const { data: platoActualizado, error: errorUpdate } = await supabase
      .from('platos_del_dia')
      .update({
        titulo,
        descripcion,
        valor: parseFloat(valor),
        imagen_url,
        orden: parseInt(orden) || 0,
        activo: activo === '1' || activo === true,
        actualizado_en: new Date().toISOString()
      })
      .eq('id', platoId)
      .select()
      .single();
    
    if (errorUpdate) throw errorUpdate;
    
    res.json(platoActualizado);
  } catch (error) {
    console.error('‚ùå Error al actualizar el plato:', error.message);
    res.status(500).json({ 
      error: 'Error al actualizar el plato',
      details: error.message
    });
  }
});

// Ruta para eliminar un plato
app.delete('/api/platos/:id', async (req, res) => {
  try {
    const platoId = req.params.id;
    
    // Obtener el plato para eliminar su imagen
    const { data: plato, error: errorPlato } = await supabase
      .from('platos_del_dia')
      .select('imagen_url')
      .eq('id', platoId)
      .single();
    
    if (errorPlato) throw errorPlato;
    if (!plato) {
      return res.status(404).json({ error: 'Plato no encontrado' });
    }
    
    // Eliminar la imagen si existe
    if (plato.imagen_url) {
      const rutaImagen = path.join(__dirname, 'public', plato.imagen_url);
      if (fs.existsSync(rutaImagen)) {
        fs.unlinkSync(rutaImagen);
      }
    }
    
    // Eliminar el plato de Supabase
    const { error } = await supabase
      .from('platos_del_dia')
      .delete()
      .eq('id', platoId);
    
    if (error) throw error;
    
    res.json({ message: 'Plato eliminado correctamente' });
  } catch (error) {
    console.error('‚ùå Error al eliminar el plato:', error.message);
    res.status(500).json({ 
      error: 'Error al eliminar el plato',
      details: error.message
    });
  }
});

// Ruta para actualizar el estado de un plato
app.put('/api/platos/:id/estado', async (req, res) => {
  const { id } = req.params;
  const { activo } = req.body;
  
  try {
    const { error } = await supabase
      .from('platos_del_dia')
      .update({ 
        activo: activo === '1' || activo === true,
        actualizado_en: new Date().toISOString()
      })
      .eq('id', id);
    
    if (error) throw error;
    
    res.json({ message: 'Estado del plato actualizado correctamente.' });
  } catch (error) {
    console.error('‚ùå Error al actualizar el estado del plato:', error.message);
    res.status(500).json({ 
      error: 'Error al actualizar el estado del plato',
      details: error.message
    });
  }
});

// Ruta para actualizar el orden de los platos
app.put('/api/platos/orden', async (req, res) => {
  const { platos } = req.body;
  
  try {
    // Actualizar el orden de cada plato
    const updates = platos.map(plato => 
      supabase
        .from('platos_del_dia')
        .update({ 
          orden: plato.orden,
          actualizado_en: new Date().toISOString()
        })
        .eq('id', plato.id)
    );
    
    // Ejecutar todas las actualizaciones en paralelo
    const results = await Promise.all(updates);
    
    // Verificar si hubo alg√∫n error en las actualizaciones
    const errores = results.filter(result => result.error);
    if (errores.length > 0) {
      throw new Error(`Error al actualizar el orden: ${errores[0].error.message}`);
    }
    
    res.json({ message: 'Orden de los platos actualizado correctamente' });
  } catch (error) {
    console.error('‚ùå Error al actualizar el orden de los platos:', error.message);
    res.status(500).json({ 
      error: 'Error al actualizar el orden de los platos',
      details: error.message
    });
  }
});

// Manejador de errores
app.use((err, req, res, next) => {
  console.error('‚ùå Error no manejado:', err);
  res.status(500).json({
    status: 'error',
    error: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
});

// Variable global para el servidor
let server;

// Funci√≥n para iniciar el servidor en un puerto espec√≠fico
function startServer(port) {
  server = app.listen(port, () => {
    console.log(`‚úÖ Servidor escuchando en el puerto ${port}`);
    console.log(`üåê Visita http://localhost:${port}`);
  }).on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
      console.log(`‚ö†Ô∏è  El puerto ${port} est√° en uso, intentando con el puerto ${port + 1}...`);
      startServer(port + 1);
    } else {
      console.error('‚ùå Error al iniciar el servidor:', err);
    }
  });

  // Manejo de cierre de la aplicaci√≥n
  process.on('SIGTERM', () => {
    console.log('\nüî¥ Recibida se√±al de terminaci√≥n. Cerrando servidor...');
    server.close(() => {
      console.log('‚úÖ Servidor cerrado correctamente');
      process.exit(0);
    });
  });
}

// Manejador de errores no controlados en promesas
process.on('unhandledRejection', (err) => {
  console.error('\n‚ùå Error no manejado en una promesa:', err);
  if (process.env.VERCEL !== '1' && server) {
    server.close(() => process.exit(1));
  } else {
    process.exit(1);
  }
});

// Iniciar el servidor solo si no estamos en un entorno serverless (como Vercel)
if (process.env.VERCEL !== '1') {
  startServer(PORT);
}

// Exportar la aplicaci√≥n para Vercel (solo la instancia de Express)
module.exports = app;
