<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Administración - Los Sartenes</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .sidebar {
            min-height: 100vh;
            background-color: #343a40;
            color: white;
        }
        .sidebar .nav-link {
            color: rgba(255, 255, 255, 0.75);
            margin-bottom: 5px;
        }
        .sidebar .nav-link:hover, .sidebar .nav-link.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
        }
        .main-content {
            padding: 20px;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #0d6efd;
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 px-0 sidebar">
                <div class="d-flex flex-column p-3">
                    <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
                        <span class="fs-4">Los Sartenes</span>
                    </a>
                    <hr>
                    <ul class="nav nav-pills flex-column mb-auto">
                        <li class="nav-item">
                            <a href="#" class="nav-link active" id="platos-tab" data-bs-toggle="tab" data-bs-target="#platos-content">
                                <i class="bi bi-egg-fried me-2"></i>
                                Platos del Día
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">Panel de Administración</h1>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#platoModal" onclick="nuevoPlato()">
                        <i class="bi bi-plus-lg"></i> Nuevo Plato
                    </button>
                </div>

                <div class="tab-content">
                    <div class="tab-pane fade show active" id="platos-content">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Imagen</th>
                                        <th>Plato</th>
                                        <th>Descripción</th>
                                        <th>Precio</th>
                                        <th>Estado</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody id="platos-table-body">
                                    <!-- Los platos se cargarán aquí dinámicamente -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Plato Modal -->
    <div class="modal fade" id="platoModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="platoModalLabel">Nuevo Plato</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="platoForm">
                        <input type="hidden" id="platoId">
                        <div class="mb-3">
                            <label for="titulo" class="form-label">Título del Plato</label>
                            <input type="text" class="form-control" id="titulo" required>
                        </div>
                        <div class="mb-3">
                            <label for="descripcion" class="form-label">Descripción</label>
                            <textarea class="form-control" id="descripcion" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="valor" class="form-label">Precio</label>
                            <input type="number" step="0.01" class="form-control" id="valor" required>
                        </div>
                        <div class="mb-3">
                            <label for="imagen_url" class="form-label">URL de la Imagen</label>
                            <input type="url" class="form-control" id="imagen_url">
                            <div class="form-text">Ingrese la URL completa de la imagen (ej: https://ejemplo.com/imagen.jpg)</div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="activo">
                            <label class="form-check-label" for="activo">Activar este plato</label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" onclick="guardarPlato()">Guardar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variables globales
        let platos = [];
        const API_BASE_URL = 'http://localhost:8001/api'; // Point to our backend server

        // Cargar los platos al iniciar
        document.addEventListener('DOMContentLoaded', cargarPlatos);

        // Cargar la lista de platos
        async function cargarPlatos() {
            try {
                console.log('Cargando platos desde:', `${API_BASE_URL}/platos`);
                const response = await fetch(`${API_BASE_URL}/platos`);
                
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.error || `Error al cargar los platos: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Datos recibidos:', data);
                
                if (data && data.success && Array.isArray(data.data)) {
                    platos = data.data;
                    renderizarPlatos();
                } else {
                    throw new Error('Formato de respuesta inesperado de la API');
                }
            } catch (error) {
                console.error('Error al cargar los platos:', error);
                alert(`Error al cargar los platos: ${error.message}`);
            }
        }

        // Renderizar la tabla de platos
        function renderizarPlatos() {
            const tbody = document.getElementById('platos-table-body');
            tbody.innerHTML = '';

            platos.forEach(plato => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>
                        ${plato.imagen_url ? 
                            `<img src="${plato.imagen_url.startsWith('http') ? plato.imagen_url : plato.imagen_url}" 
                                  alt="${plato.titulo}" 
                                  style="width: 50px; height: 50px; object-fit: cover;">` : 
                            '<div class="bg-secondary text-white d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;"><i class="bi bi-image"></i></div>'
                        }
                    </td>
                    <td>${plato.titulo}</td>
                    <td>${plato.descripcion}</td>
                    <td>$${plato.valor.toFixed(2)}</td>
                    <td>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" role="switch" 
                                id="toggle-${plato.id_plato}" 
                                ${plato.activo ? 'checked' : ''}
                                onchange="cambiarEstado(${plato.id_plato}, this.checked)">
                            <label class="form-check-label" for="toggle-${plato.id_plato}">
                                ${plato.activo ? 'Activo' : 'Inactivo'}
                            </label>
                        </div>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" onclick="editarPlato(${plato.id_plato})">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="eliminarPlato(${plato.id_plato})">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        // Preparar el formulario para un nuevo plato
        function nuevoPlato() {
            document.getElementById('platoModalLabel').textContent = 'Nuevo Plato';
            document.getElementById('platoForm').reset();
            document.getElementById('platoId').value = '';
        }

        // Editar un plato existente
        async function editarPlato(id) {
            const plato = platos.find(p => p.id_plato === id);
            if (!plato) return;

            document.getElementById('platoModalLabel').textContent = 'Editar Plato';
            document.getElementById('platoId').value = plato.id_plato;
            document.getElementById('titulo').value = plato.titulo;
            document.getElementById('descripcion').value = plato.descripcion;
            document.getElementById('valor').value = plato.valor;
            document.getElementById('imagen_url').value = plato.imagen_url || '';
            document.getElementById('activo').checked = plato.activo === 1;

            const modal = new bootstrap.Modal(document.getElementById('platoModal'));
            modal.show();
        }

        // Guardar un plato (crear o actualizar)
        async function guardarPlato() {
            const id = document.getElementById('platoId').value;
            const titulo = document.getElementById('titulo').value.trim();
            const descripcion = document.getElementById('descripcion').value.trim();
            const valor = parseFloat(document.getElementById('valor').value);
            let imagen_url = document.getElementById('imagen_url').value.trim();
            const activo = document.getElementById('activo').checked;
            
            // Validate required fields
            if (!titulo || !descripcion || isNaN(valor)) {
                alert('Por favor complete todos los campos requeridos');
                return;
            }

            const plato = {
                titulo,
                descripcion,
                valor,
                imagen_url: imagen_url || null,
                activo
            };

            try {
                const url = id ? `${API_BASE_URL}/platos/${id}` : `${API_BASE_URL}/platos`;
                const method = id ? 'PUT' : 'POST';

                console.log(`Enviando solicitud ${method} a:`, url, plato);
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(plato)
                });

                const responseData = await response.json();
                console.log('Respuesta del servidor:', responseData);

                if (!response.ok) {
                    throw new Error(responseData.error || `Error al ${id ? 'actualizar' : 'crear'} el plato`);
                }

                if (!responseData.success) {
                    throw new Error(responseData.message || 'La operación no se completó correctamente');
                }

                // Cerrar el modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('platoModal'));
                if (modal) modal.hide();
                
                // Recargar la lista de platos
                await cargarPlatos();
                
                // Mostrar mensaje de éxito
                alert(`✅ Plato ${id ? 'actualizado' : 'creado'} exitosamente`);
            } catch (error) {
                console.error('Error al guardar el plato:', error);
                alert(`❌ Error al guardar el plato: ${error.message}`);
            }
        }

        // Cambiar el estado activo/inactivo de un plato
        async function cambiarEstado(id, activo) {
            try {
                // Mostrar indicador de carga
                const button = document.querySelector(`button[onclick*="cambiarEstado(${id}, ${activo})"]`);
                const originalText = button ? button.innerHTML : '';
                if (button) {
                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
                }

                const response = await fetch(`${API_BASE_URL}/platos/${id}/toggle`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Error al cambiar el estado');
                }
                
                const result = await response.json();
                
                // Mostrar mensaje de éxito
                const toastEl = document.getElementById('toast');
                if (toastEl) {
                    const toast = new bootstrap.Toast(toastEl);
                    const toastMessage = document.getElementById('toast-message');
                    if (toastMessage) {
                        toastMessage.textContent = result.message || 'Estado actualizado correctamente';
                    }
                    toast.show();
                } else {
                    console.log('Éxito:', result.message || 'Estado actualizado correctamente');
                }
                
                // Actualizar la interfaz sin recargar toda la página
                const platoIndex = platos.findIndex(p => p.id_plato === id);
                if (platoIndex !== -1) {
                    platos[platoIndex].activo = !platos[platoIndex].activo;
                    renderizarPlatos();
                }
            } catch (error) {
                console.error('Error:', error);
                alert(`Error al cambiar el estado: ${error.message}`);
                await cargarPlatos(); // Reload to restore previous state
            }
        }

        // Eliminar un plato
        async function eliminarPlato(id) {
            if (!confirm('¿Está seguro de eliminar este plato? Esta acción no se puede deshacer.')) {
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/platos/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Error al eliminar el plato');
                }
                
                // Show success message
                const toastEl = document.getElementById('toast');
                const toast = new bootstrap.Toast(toastEl);
                document.getElementById('toast-message').textContent = 'Plato eliminado correctamente';
                toast.show();
                
                // Remove from local array and re-render
                platos = platos.filter(plato => plato.id_plato !== id);
                renderizarPlatos();
            } catch (error) {
                console.error('Error:', error);
                alert(`Error al eliminar el plato: ${error.message}`);
            }
        }
    </script>
</body>
</html>
